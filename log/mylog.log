[10-15 16:29:46] p26794 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a916220>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a916610>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a916a60>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a916c10>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a916dc0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a916f70>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a9191c0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a919610>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a919820>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a919a30>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a919c40>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a919e50>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a91c0a0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a91c2b0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a91c4c0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a91c6d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a920eb0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a924340>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a924790>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a9249a0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a924fd0>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a926460>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a9268b0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a926a60>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a926df0>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a929820>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92a070>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92a400>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92a850>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92aa60>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92ac70>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92ae80>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92c0d0>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f8f3a92c2e0>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:23:30] p29655 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f330db5c250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f330db5c640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f330db5ca90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f330db5cc40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f330db5cdf0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f330db5cfa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f330d97a1f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f330d97a640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f330d97a850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f330d97aa60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f330d97ac70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f330d97ae80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f330d97d0d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f330d97d2e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f330d97d4f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f330d97d700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f330d981ee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f330d986370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f330d9867c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f330d9869d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f330d988040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f330d988490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f330d9888e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f330d988a90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f330d988e20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f330d98a850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f330d98c0a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f330d98c430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f330d98c880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f330d98ca90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f330d98cca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f330d98ceb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f330d98f100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f330d98f310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:50:53] p32310 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f95c5bef250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5bef640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5befa90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f95c5befc40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f95c5befdf0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f95c5beffa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0c1f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0c640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0c850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0ca60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0cc70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0ce80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0f0d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0f2e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0f4f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a0f700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a13ee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a18370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a187c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a189d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1a040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1a490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1a8e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1aa90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1ae20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1c850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1e0a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1e430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1e880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1ea90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1eca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a1eeb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a21100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f95c5a21310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:51:15] p32317 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f6a8651d250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f6a8651d640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f6a8651da90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f6a8651dc40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f6a8651ddf0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f6a8651dfa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633b1f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633b640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633b850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633ba60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633bc70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633be80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633e0d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633e2e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633e4f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f6a8633e700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f6a86342ee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f6a86347370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f6a863477c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f6a863479d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f6a86349040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f6a86349490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f6a863498e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f6a86349a90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f6a86349e20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634b850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634d0a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634d430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634d880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634da90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634dca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f6a8634deb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f6a86350100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f6a86350310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:52:02] p32329 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7fc259500250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7fc259500640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7fc259500a90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7fc259500c40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7fc259500df0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7fc259500fa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7fc25931e1f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7fc25931e640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7fc25931e850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7fc25931ea60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7fc25931ec70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7fc25931ee80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7fc2593210d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7fc2593212e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7fc2593214f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7fc259321700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7fc259325ee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7fc25932a370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7fc25932a7c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7fc25932a9d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7fc25932c040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7fc25932c490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7fc25932c8e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7fc25932ca90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7fc25932ce20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7fc25932e850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7fc2593300a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7fc259330430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7fc259330880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7fc259330a90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7fc259330ca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7fc259330eb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7fc259333100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7fc259333310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:52:12] p32342 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce61e250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce61e640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce61ea90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce61ec40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce61edf0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce61efa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43c1f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43c640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43c850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43ca60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43cc70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43ce80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43f0d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43f2e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43f4f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce43f700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce443ee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce448370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce4487c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce4489d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44a040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44a490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44a8e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44aa90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44ae20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44c850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44e0a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44e430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44e880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44ea90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44eca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce44eeb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce451100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7fa5ce451310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:52:22] p32347 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4eb520>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4eb910>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4ebd60>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4ebf10>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f2100>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f22b0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f24c0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f2910>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f2b20>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f2d30>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f2f40>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f3190>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f33a0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f35b0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f37c0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4f39d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4fc1f0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4fc640>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4fca90>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4fcca0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4ff310>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4ff760>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4ffbb0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4ffd60>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7fe12c501130>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7fe12c501b20>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7fe12c504370>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7fe12c504700>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7fe12c504b50>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7fe12c504d60>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7fe12c504f70>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4861c0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4863d0>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7fe12c4865e0>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:53:08] p32400 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f6401b73250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f6401b73640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f6401b73a90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f6401b73c40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f6401b73df0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f6401b73fa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f64019901f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f6401990640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f6401990850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f6401990a60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f6401990c70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f6401990e80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f64019930d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f64019932e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f64019934f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f6401993700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f6401997ee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f640199c370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f640199c7c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f640199c9d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f640199e040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f640199e490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f640199e8e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f640199ea90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f640199ee20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f64019a0850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f64019a20a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f64019a2430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f64019a2880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f64019a2a90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f64019a2ca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f64019a2eb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f64019a5100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f64019a5310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:53:42] p32422 {/home/deba/Desktop/P416CompilerBackend/src/util.py:20} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910d2e0>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910d6d0>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910db20>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910dcd0>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910de80>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910e070>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910e280>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910e6d0>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910e8e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910eaf0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910ed00>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f7cc910ef10>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9111160>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9111370>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9111580>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9111790>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9115f70>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911b400>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911b850>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911ba60>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911c0d0>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911c520>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911c970>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911cb20>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911ceb0>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f7cc911f8e0>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9122130>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f7cc91224c0>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9122910>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9122b20>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9122d30>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9122f40>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f7cc9123190>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f7cc91233a0>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:56:53] p32477 {/home/deba/Desktop/P416CompilerBackend/src/util.py:21} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f4a667b5250>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f4a667b5640>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f4a667b5a90>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f4a667b5c40>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f4a667b5df0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f4a667b5fa0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d51f0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d5640>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d5850>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d5a60>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d5c70>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d5e80>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d80d0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d82e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d84f0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f4a665d8700>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f4a665dcee0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e0370>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e07c0>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e09d0>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e3040>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e3490>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e38e0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e3a90>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e3e20>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e5850>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e70a0>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e7430>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e7880>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e7a90>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e7ca0>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f4a665e7eb0>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f4a665ea100>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f4a665ea310>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 17:57:07] p32481 {/home/deba/Desktop/P416CompilerBackend/src/util.py:21} INFO - ParsedP416Program(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f0fae0762e0>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae0766d0>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae076b20>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f0fae076cd0>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f0fae076e80>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f0fae077070>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f0fae077280>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae0776d0>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f0fae0778e0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f0fae077af0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f0fae077d00>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f0fae077f10>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f0fae07a160>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f0fae07a370>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f0fae07a580>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f0fae07a790>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f0fae07ef70>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae084400>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae084850>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f0fae084a60>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f0fae0850d0>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae085520>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae085970>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f0fae085b20>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f0fae085eb0>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f0fae0878e0>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08b130>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08b4c0>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08b910>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08bb20>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08bd30>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08bf40>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08c190>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f0fae08c3a0>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 22:01:08] p6077 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P4ProgramParserFactory.py:25} INFO - ParsedP416ProgramForV1ModelArchitecture(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dc310>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dc700>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dcb50>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dcd00>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dceb0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb0a0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb2b0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb700>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb910>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fbb20>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fbd30>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fbf40>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd190>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd3a0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd5b0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd7c0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1401fa0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1407430>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1407880>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1407a90>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408100>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408550>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf14089a0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408b50>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408ee0>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140a910>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140d160>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140d4f0>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140d940>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140db50>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140dd60>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140df70>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f7cf14101c0>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f7cf14103d0>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 22:01:08] p6077 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P4ProgramParserFactory.py:25} INFO - ParsedP416ProgramForV1ModelArchitecture(header_types=[HeaderType(name='scalars_0', id=0, fields=[['tmp', 32, False], ['tmp_0', 32, False], ['tmp_1', 48, False], ['tmp_2', 32, False], ['tmp_3', 32, False], ['ndp_processing_control_block_host_ipv6_tmp', 128, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status', 48, False], ['cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status', 48, False], ['tmp_4', 32, False], ['tmp_5', 32, False], ['tmp_6', 32, False], ['tmp_7', 32, False], ['tmp_8', 32, False], ['tmp_9', 32, False], ['tmp_10', 32, False], ['temp_src_addr_0', 128, False], ['temp_src_port_0', 16, False], ['temp_ack_no_0', 32, False], ['temp_src_addr_1', 128, False], ['temp_src_port_1', 16, False], ['temp_ack_no_1', 32, False], ['is_recirculation_needed_0', 1, False], ['egress_queue_depth_monitor_control_block_last_updated_deq_depth', 19, False], ['userMetadata.l4_src_port', 16, False], ['userMetadata.l4_dst_port', 16, False], ['userMetadata.is_multicast', 1, False], ['userMetadata.is_pkt_rcvd_from_downstream', 1, False], ['userMetadata.flowlet_map_index', 32, False], ['userMetadata.flowlet_id', 16, False], ['userMetadata.flow_inter_packet_gap', 48, False], ['userMetadata.flowlet_last_pkt_seen_time', 48, False], ['userMetadata.flowlet_last_used_path', 9, False], ['userMetadata.rate_control_allowed_for_the_tcp_flow', 2, False], ['userMetadata.rate_control_event', 6, False], ['userMetadata.last_seq_no_with_rate_control', 32, False], ['userMetadata.egr_port_rate_value_range', 10, False], ['userMetadata.egr_queue_depth_value_range', 10, False], ['userMetadata.minimum_group_members_requirement', 10, False], ['userMetadata.egr_queue_based_path', 9, False], ['userMetadata.egr_rate_based_path', 9, False], ['userMetadata.temp', 32, False], ['userMetadata.temp_8_bit', 8, False], ['_padding_0', 1, False]]), HeaderType(name='standard_metadata', id=1, fields=[['ingress_port', 9, False], ['egress_spec', 9, False], ['egress_port', 9, False], ['instance_type', 32, False], ['packet_length', 32, False], ['enq_timestamp', 32, False], ['enq_qdepth', 19, False], ['deq_timedelta', 32, False], ['deq_qdepth', 19, False], ['ingress_global_timestamp', 48, False], ['egress_global_timestamp', 48, False], ['mcast_grp', 16, False], ['egress_rid', 16, False], ['checksum_error', 1, False], ['parser_error', 32, False], ['priority', 3, False], ['_padding', 3, False]]), HeaderType(name='packet_out_t', id=2, fields=[['egress_port', 9, False], ['_pad', 7, False]]), HeaderType(name='packet_in_t', id=3, fields=[['ingress_port', 9, False], ['_pad', 2, False], ['ingress_queue_event', 8, False], ['ingress_queue_event_data', 48, False], ['ingress_queue_event_port', 9, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['delay_event_src_type', 8, False], ['path_delay_event_type', 8, False], ['path_delay_event_data', 48, False], ['dst_addr', 128, False], ['path_delay_event_port', 9, False]]), HeaderType(name='ethernet_t', id=4, fields=[['dst_addr', 48, False], ['src_addr', 48, False], ['ether_type', 16, False]]), HeaderType(name='ipv4_t', id=5, fields=[['version', 4, False], ['ihl', 4, False], ['dscp', 6, False], ['ecn', 2, False], ['len', 16, False], ['identification', 16, False], ['flags', 3, False], ['frag_offset', 13, False], ['ttl', 8, False], ['protocol', 8, False], ['hdr_checksum', 16, False], ['src_addr', 32, False], ['dst_addr', 32, False]]), HeaderType(name='ipv6_t', id=6, fields=[['version', 4, False], ['traffic_class', 6, False], ['ecn', 2, False], ['flow_label', 20, False], ['payload_len', 16, False], ['next_hdr', 8, False], ['hop_limit', 8, False], ['src_addr', 128, False], ['dst_addr', 128, False]]), HeaderType(name='tcp_t', id=7, fields=[['src_port', 16, False], ['dst_port', 16, False], ['seq_no', 32, False], ['ack_no', 32, False], ['data_offset', 4, False], ['res', 3, False], ['ecn', 3, False], ['urg_control_flag', 1, False], ['ack_control_flag', 1, False], ['psh_control_flag', 1, False], ['rst_control_flag', 1, False], ['syn_control_flag', 1, False], ['fin_control_flag', 1, False], ['window', 16, False], ['checksum', 16, False], ['urgent_ptr', 16, False]]), HeaderType(name='udp_t', id=8, fields=[['src_port', 16, False], ['dst_port', 16, False], ['len', 16, False], ['checksum', 16, False]]), HeaderType(name='icmpv6_t', id=9, fields=[['type', 8, False], ['code', 8, False], ['checksum', 16, False]]), HeaderType(name='ndp_t', id=10, fields=[['flags', 32, False], ['target_ipv6_addr', 128, False], ['type', 8, False], ['length', 8, False], ['target_mac_addr', 48, False]]), HeaderType(name='egress_queue_event_info_t', id=11, fields=[['event_src_type', 8, False], ['egress_queue_event', 8, False], ['egress_queue_event_data', 48, False], ['egress_queue_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='egress_rate_event_info_t', id=12, fields=[['event_src_type', 8, False], ['egress_traffic_color', 32, False], ['egress_rate_event_data', 48, False], ['egress_rate_event_port', 9, False], ['padding', 7, False]]), HeaderType(name='flag_headers_t', id=13, fields=[['is_control_pkt_from_delay_proc', 1, 0], ['is_control_pkt_from_ing_queue_rate', 1, 0], ['is_control_pkt_from_ing_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_depth', 1, 0], ['is_control_pkt_from_egr_queue_rate', 1, 0], ['is_dp_only_multipath_algo_processing_required', 1, 0], ['is_fake_ack_for_rate_ctrl_required', 1, 0], ['do_l3_l2', 1, 0], ['my_station_table_hit', 1, 0], ['downstream_routing_table_hit', 1, 0], ['is_pkt_toward_host', 1, 0], ['found_egr_queue_depth_based_path', 1, 0], ['found_egr_queue_rate_based_path', 1, 0], ['found_path_delay_based_path', 1, 0], ['found_multi_criteria_paths', 1, 0], ['is_packet_from_downstream_port', 1, 0], ['is_packet_from_upstream_port', 1, 0], ['padding', 7, False]]), HeaderType(name='ingress_rate_event_info_t', id=14, fields=[['event_src_type', 8, False], ['ingress_traffic_color', 32, False], ['ingress_rate_event_data', 48, False], ['ingress_rate_event_port', 9, False], ['padding', 7, False]])], headers=[Header(name='scalars', id=0, header_type='scalars_0', metadata=True, pi_omit=True), Header(name='standard_metadata', id=1, header_type='standard_metadata', metadata=True, pi_omit=True), Header(name='packet_out', id=2, header_type='packet_out_t', metadata=False, pi_omit=True), Header(name='packet_in', id=3, header_type='packet_in_t', metadata=False, pi_omit=True), Header(name='ethernet', id=4, header_type='ethernet_t', metadata=False, pi_omit=True), Header(name='ipv4', id=5, header_type='ipv4_t', metadata=False, pi_omit=True), Header(name='ipv6', id=6, header_type='ipv6_t', metadata=False, pi_omit=True), Header(name='tcp', id=7, header_type='tcp_t', metadata=False, pi_omit=True), Header(name='udp', id=8, header_type='udp_t', metadata=False, pi_omit=True), Header(name='icmpv6', id=9, header_type='icmpv6_t', metadata=False, pi_omit=True), Header(name='ndp', id=10, header_type='ndp_t', metadata=False, pi_omit=True), Header(name='egress_queue_event_hdr', id=11, header_type='egress_queue_event_info_t', metadata=False, pi_omit=True), Header(name='egress_rate_event_hdr', id=12, header_type='egress_rate_event_info_t', metadata=False, pi_omit=True), Header(name='flag_hdr', id=13, header_type='flag_headers_t', metadata=False, pi_omit=True), Header(name='ingress_rate_event_hdr', id=14, header_type='ingress_rate_event_info_t', metadata=False, pi_omit=True)], header_stacks=[], header_union_types=[], header_unions=[], header_union_stacks=[], field_lists=[FieldList(id=1, name='fl', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 117), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=2, name='fl_0', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 111), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=3, name='fl_1', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 43), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=4, name='fl_2', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 82), ('source_fragment', '{standard_metadata, local_metadata}')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_spec']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'instance_type']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'packet_length']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'enq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_timedelta']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'deq_qdepth']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_global_timestamp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'mcast_grp']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'egress_rid']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'checksum_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'parser_error']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'priority']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_multicast']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.is_pkt_rcvd_from_downstream']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_queue_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['egress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_delay_proc']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_ing_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_depth']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_control_pkt_from_egr_queue_rate']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_dp_only_multipath_algo_processing_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_fake_ack_for_rate_ctrl_required']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'do_l3_l2']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'my_station_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'downstream_routing_table_hit']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_pkt_toward_host']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_depth_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_egr_queue_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_path_delay_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'found_multi_criteria_paths']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_downstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'is_packet_from_upstream_port']), Element(type=<ValueType.FIELD: 'field'>, value=['flag_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_map_index']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_id']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flow_inter_packet_gap']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_pkt_seen_time']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.flowlet_last_used_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_allowed_for_the_tcp_flow']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.rate_control_event']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.last_seq_no_with_rate_control']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ingress_rate_event_hdr', 'padding']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_port_rate_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_depth_value_range']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.minimum_group_members_requirement']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_queue_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.egr_rate_based_path']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.temp_8_bit'])]), FieldList(id=5, name='parsed_headers_t', source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 366), ('column', 46), ('source_fragment', 'hdr')])"), elements=[Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', 'egress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_out', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', '_pad']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_queue_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'ingress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_traffic_color']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'egress_rate_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'delay_event_src_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_type']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_data']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['packet_in', 'path_delay_event_port']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ethernet', 'ether_type']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ihl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dscp']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'identification']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'frag_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'ttl']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'protocol']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'hdr_checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv4', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'version']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'traffic_class']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'hop_limit']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'seq_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_no']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'data_offset']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'res']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ecn']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urg_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'ack_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'psh_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'rst_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'syn_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'fin_control_flag']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'window']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['tcp', 'urgent_ptr']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'len']), Element(type=<ValueType.FIELD: 'field'>, value=['udp', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code']), Element(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'checksum']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length']), Element(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'])])], errors=[['NoError', 0], ['PacketTooShort', 1], ['NoMatch', 2], ['StackOutOfBounds', 3], ['HeaderTooShort', 4], ['ParserTimeout', 5], ['ParserInvalidArgument', 6]], enums=[], parsers=None, parse_vsets=None, deparsers=None, meter_arrays=[MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_upstream', id=0, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 69), (\'column\', 96), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_upstream\\\\") meter(MAX_FLOW_TYPES,MeterType.packets) flow_type_based_ingress_meter_for_upstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_meter_for_downstream', id=1, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/ingress_rate_monitor.p4\'), (\'line\', 70), (\'column\', 99), (\'source_fragment\', \'    @name(\\\\"flow_type_based_ingress_meter_for_downstream\\\\") meter(MAX_FLOW_TYPES, MeterType.packets) flow_type_based_ingress_meter_for_downstream;\')])'), is_direct=False, size=64, rate_count=2, type='packets', binding=None, result_target=None), MeterArray(name='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', id=2, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/spine_downstream_routing.p4\'), (\'line\', 14), (\'column\', 69), (\'source_fragment\', \'   @name(\\\\"host_egress_meter\\\\") direct_meter<bit<32>>(MeterType.bytes) host_egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='bytes', binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', id=3, source_info=SourceInfo(srcinfo='OrderedDict([(\'filename\', \'p4src/src/egress_rate_monitor.p4\'), (\'line\', 14), (\'column\', 67), (\'source_fragment\', \'    @name(\\\\"egress_meter\\\\") direct_meter<bit<32>>(MeterType.packets) egress_meter;\')])'), is_direct=True, size=1024, rate_count=2, type='packets', binding='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', result_target=['egress_rate_event_hdr', 'egress_traffic_color']), MeterArray(name='egress_port_meters', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 162), ('column', 55), ('source_fragment', 'egress_port_meters')])"), is_direct=False, size=256, rate_count=2, type='packets', binding=None, result_target=None)], counter_arrays=[CounterArray(name='ndp_reply_table_counter', id=0, source_info="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 45), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', size=None), CounterArray(name='l2_ternary_table_counter', id=1, source_info="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 40), ('column', 7), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', size=None), CounterArray(name='downstream_routing_table', id=2, source_info="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 36), ('column', 9), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', size=None), CounterArray(name='egr_queue_depth_based_upstream_path_table_counter', id=3, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 91), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', size=None), CounterArray(name='egr_port_rate_based_upstream_path_table_counter', id=4, source_info="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 137), ('column', 8), ('source_fragment', 'counters')])", is_direct=True, binding='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', size=None), CounterArray(name='egressPortCounter', id=5, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 157), ('column', 59), ('source_fragment', 'egressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ingressPortCounter', id=6, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 158), ('column', 59), ('source_fragment', 'ingressPortCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='ctrlPktToCPCounter', id=7, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 159), ('column', 59), ('source_fragment', 'ctrlPktToCPCounter')])", is_direct=False, binding=None, size=256), CounterArray(name='p2pFeedbackCounter', id=8, source_info="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 160), ('column', 59), ('source_fragment', 'p2pFeedbackCounter')])", is_direct=False, binding=None, size=256)], register_arrays=[RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_id_map', id=0, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 16), (\'column\', 55), (\'source_fragment\', \'    @name(\\\\"flowlet_id_map\\\\") register<bit<16>>(32w8192) flowlet_id_map;\')])', size=8192, bitwidth=16), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map', id=1, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 17), (\'column\', 61), (\'source_fragment\', \'    @name(\\\\"flowlet_lasttime_map\\\\") register<bit<48>>(32w8192) flowlet_lasttime_map;\')])', size=8192, bitwidth=48), RegisterArray(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port', id=2, source_info='OrderedDict([(\'filename\', \'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4\'), (\'line\', 18), (\'column\', 62), (\'source_fragment\', \'    @name(\\\\"flowlet_last_used_port\\\\") register<bit<9>>(32w8192) flowlet_last_used_port;\')])', size=8192, bitwidth=9), RegisterArray(name='EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth', id=3, source_info="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 18), ('column', 43), ('source_fragment', 'port_last_updated_egress_queue_avg_depth')])", size=256, bitwidth=19), RegisterArray(name='egress_queue_depth_value_map', id=4, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 165), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_depth_last_update_time_map', id=5, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 166), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"egress_queue_depth_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_depth_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_value_map', id=6, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 167), (\'column\', 76), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='egress_queue_rate_last_update_time_map', id=7, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 168), (\'column\', 87), (\'source_fragment\', \' @name(\\\\"egress_queue_rate_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) egress_queue_rate_last_update_time_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_value_map', id=8, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 169), (\'column\', 77), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_value_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_value_map;\')])', size=256, bitwidth=48), RegisterArray(name='port_to_port_delay_last_update_time_map', id=9, source_info='OrderedDict([(\'filename\', \'p4src/src/CONSTANTS.p4\'), (\'line\', 170), (\'column\', 88), (\'source_fragment\', \' @name(\\\\"port_to_port_delay_last_update_time_map\\\\")register<bit<48>>(MAX_PORTS_IN_SWITCH) port_to_port_delay_last_update_time_map;\')])', size=256, bitwidth=48)], calculations=[Calculation(name='calc', id=0, algo='crc16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'src_port'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['tcp', 'dst_port'], bitwidth=None)], source_info=None), Calculation(name='calc_0', id=1, algo='csum16', input=[Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'payload_len'], bitwidth=None), Input(type=<ValueType.HEXSTR: 'hexstr'>, value='0x00', bitwidth=8), Input(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['icmpv6', 'code'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'flags'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_ipv6_addr'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'type'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'length'], bitwidth=None), Input(type=<ValueType.FIELD: 'field'>, value=['ndp', 'target_mac_addr'], bitwidth=None)], source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"))], learn_lists=[], actions=[Action(name='NoAction', id=0, runtime_data=[], primitives=[]), Action(name='NoAction', id=1, runtime_data=[], primitives=[]), Action(name='IngressPipeImpl.init_pkt', id=2, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.drop', id=3, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', id=4, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', id=5, runtime_data=[RuntimeDatum(name='flow_type_based_meter_idx', bitwidth=32)], primitives=[Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', id=6, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9), RuntimeDatum(name='dmac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.drop', id=7, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', id=8, runtime_data=[RuntimeDatum(name='gid', bitwidth=16)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', id=9, runtime_data=[RuntimeDatum(name='target_mac', bitwidth=48)], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.ndp_processing_control_block.ndp_default_action', id=10, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', id=11, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param', id=12, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', id=13, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param', id=14, runtime_data=[RuntimeDatum(name='port_num', bitwidth=9)], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map', id=15, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=16, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=17, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=18, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id', id=19, runtime_data=[], primitives=[Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=20, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port', id=21, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=22, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=23, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port', id=24, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=25, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=26, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port', id=27, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine150', id=28, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='spine157', id=29, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine168', id=30, runtime_data=[], primitives=[Primitive()]), Action(name='l2_ternary44', id=31, runtime_data=[], primitives=[Primitive()]), Action(name='spine180', id=32, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_routing_tables145', id=33, runtime_data=[], primitives=[Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing86', id=34, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='cp_assisted_multicriteria_upstream_policy_routing104', id=35, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=36, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.set_all_header_invalid', id=37, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack', id=38, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase', id=39, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow', id=40, runtime_data=[], primitives=[Primitive()]), Action(name='egress_queue_depth_monitor40', id=41, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor48', id=42, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor56', id=43, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='egress_queue_depth_monitor35', id=44, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='egress_rate_monitor35', id=45, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive()]), Action(name='rate_control97', id=46, runtime_data=[], primitives=[Primitive()]), Action(name='rate_control101', id=47, runtime_data=[], primitives=[Primitive()]), Action(name='spine309', id=48, runtime_data=[], primitives=[Primitive()]), Action(name='spine313', id=49, runtime_data=[], primitives=[Primitive()]), Action(name='spine325', id=50, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine328', id=51, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine331', id=52, runtime_data=[], primitives=[Primitive()]), Action(name='spine334', id=53, runtime_data=[], primitives=[Primitive(), Primitive()]), Action(name='spine295', id=54, runtime_data=[], primitives=[Primitive()]), Action(name='spine346', id=55, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine372', id=56, runtime_data=[], primitives=[Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive(), Primitive()]), Action(name='spine391', id=57, runtime_data=[], primitives=[Primitive(), Primitive()])], pipelines=[Pipeline(name='ingress', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 73), ('column', 8), ('source_fragment', 'IngressPipeImpl')])"), init_table='node_2', tables=[Table(name='tbl_spine150', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 150), ('column', 37), ('source_fragment', '= hdr.packet_out.egress_port; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[28], actions=['spine150'], next_tables={'spine150': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=28, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine157', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 157), ('column', 41), ('source_fragment', '= false; //thie means . this packet doesn;t need normal forwarding processing. It wil only be used for updating the internal routing related information ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[29], actions=['spine157'], next_tables={'spine157': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=29, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_init_pkt', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 161), ('column', 8), ('source_fragment', 'init_pkt()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[2], actions=['IngressPipeImpl.init_pkt'], next_tables={'IngressPipeImpl.init_pkt': 'IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table'}, direct_meters=None, base_default_next='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', default_entry=DefaultEntry(action_id=2, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.ingress_rate_monitor_control_block.flow_type_based_ingress_stats_table', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ingress_rate_monitor.p4'), ('line', 87), ('column', 10), ('source_fragment', 'flow_type_based_ingress_stats_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.ingress_port', target=['standard_metadata', 'ingress_port'], mask=None), Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.traffic_class', target=['ipv6', 'traffic_class'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[4, 5, 0], actions=['IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream', 'NoAction'], next_tables={'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_upstream': 'node_8', 'IngressPipeImpl.ingress_rate_monitor_control_block.monitor_incoming_flow_based_on_flow_type_for_pkts_rcvd_from_downstream': 'node_8', 'NoAction': 'node_8'}, direct_meters=None, base_default_next='node_8', default_entry=DefaultEntry(action_id=0, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/ndp.p4'), ('line', 36), ('column', 9), ('source_fragment', 'ndp_reply_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='hdr.ipv6.src_addr', target=['ipv6', 'src_addr'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[9, 10], actions=['IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action'], next_tables={'IngressPipeImpl.ndp_processing_control_block.ndp_ns_to_na': 'tbl_spine168', 'IngressPipeImpl.ndp_processing_control_block.ndp_default_action': 'tbl_spine168'}, direct_meters=None, base_default_next='tbl_spine168', default_entry=DefaultEntry(action_id=10, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_spine168', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 168), ('column', 7), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[30], actions=['spine168'], next_tables={'spine168': 'node_11'}, direct_meters=None, base_default_next='node_11', default_entry=DefaultEntry(action_id=30, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 30), ('column', 9), ('source_fragment', 'l2_ternary_table')])"), key=[Key(match_type=<MatchType.TERNARY: 'ternary'>, name='hdr.ethernet.dst_addr', target=['ethernet', 'dst_addr'], mask=None)], match_type=<MatchType.TERNARY: 'ternary'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[8, 7], actions=['IngressPipeImpl.l2_ternary_processing_control_block.set_multicast_group', 'IngressPipeImpl.l2_ternary_processing_control_block.drop'], next_tables={'__HIT__': 'tbl_l2_ternary44', '__MISS__': 'node_14'}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=7, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_l2_ternary44', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/l2_ternary.p4'), ('line', 44), ('column', 12), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[31], actions=['l2_ternary44'], next_tables={'l2_ternary44': 'node_14'}, direct_meters=None, base_default_next='node_14', default_entry=DefaultEntry(action_id=31, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine_downstream_routing.p4'), ('line', 27), ('column', 9), ('source_fragment', 'downstream_routing_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None)], match_type=<MatchType.LPM: 'lpm'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[6, 1], actions=['IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port', 'NoAction'], next_tables={'IngressPipeImpl.spine_downstream_routing_control_block.set_downstream_egress_port': 'node_16', 'NoAction': 'node_16'}, direct_meters='IngressPipeImpl.spine_downstream_routing_control_block.host_egress_meter', base_default_next='node_16', default_entry=DefaultEntry(action_id=1, action_const=False, action_data=[], action_entry_const=False), action_profile=None), Table(name='tbl_drop', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 46), ('source_fragment', 'drop()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[3], actions=['IngressPipeImpl.drop'], next_tables={'IngressPipeImpl.drop': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=3, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine180', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 180), ('column', 63), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[32], actions=['spine180'], next_tables={'spine180': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', default_entry=DefaultEntry(action_id=32, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_table', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 70), ('column', 10), ('source_fragment', 'egr_queue_depth_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_queue_depth_value_range', target=['scalars', 'userMetadata.egr_queue_depth_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[11, 12], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_routing_tables145'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_routing_tables145', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_routing_tables145', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 145), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[33], actions=['cp_assisted_multicriteria_upstream_routing_tables145'], next_tables={'cp_assisted_multicriteria_upstream_routing_tables145': 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table'}, direct_meters=None, base_default_next='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', default_entry=DefaultEntry(action_id=33, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_table', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 116), ('column', 10), ('source_fragment', 'egr_port_rate_based_upstream_path_table')])"), key=[Key(match_type=<MatchType.LPM: 'lpm'>, name='hdr.ipv6.dst_addr', target=['ipv6', 'dst_addr'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.egr_port_rate_value_range', target=['scalars', 'userMetadata.egr_port_rate_value_range'], mask=None), Key(match_type=<MatchType.RANGE: 'range'>, name='local_metadata.minimum_group_members_requirement', target=['scalars', 'userMetadata.minimum_group_members_requirement'], mask=None)], match_type=<MatchType.RANGE: 'range'>, type=<TableType.INDIRECT_WS: 'indirect_ws'>, max_size=1024, with_counters=True, support_timeout=False, action_ids=[13, 14], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_without_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', 'IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector_action_with_param': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', default_entry=None, action_profile='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector'), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_lookup_flowlet_id_map', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 77), ('column', 8), ('source_fragment', 'lookup_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[15], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.lookup_flowlet_id_map': 'node_24'}, direct_meters=None, base_default_next='node_24', default_entry=DefaultEntry(action_id=15, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing86', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 86), ('column', 18), ('source_fragment', 'egress_queue_rate_value_map.read(low_utilization_path_rate_status, (bit<32>)local_metadata.egr_rate_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[34], actions=['cp_assisted_multicriteria_upstream_policy_routing86'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing86': 'node_27'}, direct_meters=None, base_default_next='node_27', default_entry=DefaultEntry(action_id=34, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 88), ('column', 20), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[25], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=25, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 90), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[22], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=22, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 92), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[23], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', default_entry=DefaultEntry(action_id=23, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 95), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[16], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=16, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 97), ('column', 16), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[20], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', default_entry=DefaultEntry(action_id=20, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_0', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 98), ('column', 16), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[17], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=17, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing104', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 104), ('column', 19), ('source_fragment', 'egress_queue_rate_value_map.read(low_delay_path_rate_status, (bit<32>)local_metadata.egr_queue_based_path)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[35], actions=['cp_assisted_multicriteria_upstream_policy_routing104'], next_tables={'cp_assisted_multicriteria_upstream_policy_routing104': 'node_38'}, direct_meters=None, base_default_next='node_38', default_entry=DefaultEntry(action_id=35, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 106), ('column', 21), ('source_fragment', 'use_low_egress_queue_depth_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[24], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_depth_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=24, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 110), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[26], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=26, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 112), ('column', 22), ('source_fragment', 'use_low_egress_queue_rate_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[27], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_low_egress_queue_rate_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', default_entry=DefaultEntry(action_id=27, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 114), ('column', 18), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[18], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=18, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 116), ('column', 17), ('source_fragment', 'use_old_port()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[21], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.use_old_port': 'tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2'}, direct_meters=None, base_default_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', default_entry=DefaultEntry(action_id=21, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_2', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 117), ('column', 17), ('source_fragment', 'update_flowlet_id_map()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[19], actions=['IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id'], next_tables={'IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.update_flowlet_id': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=19, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_queue_depth_based_upstream_path_selector', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 69), ('column', 56), ('source_fragment', 'egr_queue_depth_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])])), ActionProfile(name='IngressPipeImpl.cp_assisted_multicriteria_upstream_routing_control_block.egr_port_rate_based_upstream_path_selector', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_routing_tables.p4'), ('line', 115), ('column', 56), ('source_fragment', 'egr_port_rate_based_upstream_path_selector')])"), max_size=128, selector=Selector(algo='crc16', input=[Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'dst_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'src_addr']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'flow_label']), Element(type=<ValueType.FIELD: 'field'>, value=['ipv6', 'next_hdr']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_src_port']), Element(type=<ValueType.FIELD: 'field'>, value=['scalars', 'userMetadata.l4_dst_port']), Element(type=<ValueType.FIELD: 'field'>, value=['standard_metadata', 'ingress_global_timestamp'])]))], conditionals=[Conditional(name='node_2', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 148), ('column', 8), ('source_fragment', 'hdr.packet_out.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dc310>, true_next='tbl_spine150', false_next='node_4'), Conditional(name='node_4', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 155), ('column', 14), ('source_fragment', 'hdr.packet_in.isValid() && (standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_RECIRC)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dc700>, true_next='tbl_spine157', false_next='tbl_init_pkt'), Conditional(name='node_8', id=2, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 166), ('column', 8), ('source_fragment', '(hdr.icmpv6.type == ICMP6_TYPE_NS ) && (hdr.icmpv6.type == ICMP6_TYPE_NS)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dcb50>, true_next='IngressPipeImpl.ndp_processing_control_block.ndp_reply_table', false_next='node_11'), Conditional(name='node_11', id=3, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 170), ('column', 8), ('source_fragment', 'local_metadata.flag_hdr.do_l3_l2')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dcd00>, true_next='IngressPipeImpl.l2_ternary_processing_control_block.l2_ternary_table', false_next=None), Conditional(name='node_14', id=4, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 173), ('column', 12), ('source_fragment', 'hdr.ipv6.isValid()')])"), expression=<P416JsonParser.Expression object at 0x7f7cf15dceb0>, true_next='IngressPipeImpl.spine_downstream_routing_control_block.downstream_routing_table', false_next=None), Conditional(name='node_16', id=5, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 175), ('column', 15), ('source_fragment', 'local_metadata.flag_hdr.downstream_routing_table_hit')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb0a0>, true_next='node_17', false_next='tbl_spine180'), Conditional(name='node_17', id=6, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 177), ('column', 19), ('source_fragment', 'hdr.ipv6.hop_limit == 0')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb2b0>, true_next='tbl_drop', false_next=None), Conditional(name='node_24', id=7, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 81), ('column', 12), ('source_fragment', '(hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT) || (hdr.ipv6.traffic_class == TRAFFIC_CLASS_HIGH_THROUGHPUT2)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb700>, true_next='node_25', false_next='node_36'), Conditional(name='node_25', id=8, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 83), ('column', 16), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fb910>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing86', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port'), Conditional(name='node_27', id=9, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 87), ('column', 20), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fbb20>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port', false_next='node_29'), Conditional(name='node_29', id=10, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 89), ('column', 26), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fbd30>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port', false_next='node_31'), Conditional(name='node_31', id=11, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 91), ('column', 27), ('source_fragment', 'low_utilization_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fbf40>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_0', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id'), Conditional(name='node_36', id=12, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 101), ('column', 17), ('source_fragment', 'local_metadata.flow_inter_packet_gap > FLOWLET_INTER_PACKET_GAP_THRESHOLD')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd190>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing104', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_old_port_0'), Conditional(name='node_38', id=13, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 105), ('column', 21), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)GREEN')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd3a0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_depth_port_1', false_next='node_40'), Conditional(name='node_40', id=14, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 109), ('column', 26), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)YELLOW')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd5b0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_0', false_next='node_42'), Conditional(name='node_42', id=15, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/cp_assisted_multicriteria_upstream_policy_routing.p4'), ('line', 111), ('column', 28), ('source_fragment', 'low_delay_path_rate_status == (bit<48>)RED')])"), expression=<P416JsonParser.Expression object at 0x7f7cf13fd7c0>, true_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_use_low_egress_queue_rate_port_1', false_next='tbl_cp_assisted_multicriteria_upstream_policy_routing_control_block_update_flowlet_id_1')]), Pipeline(name='egress', id=1, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 226), ('column', 8), ('source_fragment', 'EgressPipeImpl')])"), init_table='tbl_spine295', tables=[Table(name='tbl_spine295', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 295), ('column', 8), ('source_fragment', 'bool is_recirculation_needed = false;')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[54], actions=['spine295'], next_tables={'spine295': 'node_50'}, direct_meters=None, base_default_next='node_50', default_entry=DefaultEntry(action_id=54, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor35', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 35), ('column', 12), ('source_fragment', 'port_last_updated_egress_queue_avg_depth.read(last_updated_deq_depth, (bit<32>)standard_metadata.egress_spec); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[44], actions=['egress_queue_depth_monitor35'], next_tables={'egress_queue_depth_monitor35': 'node_52'}, direct_meters=None, base_default_next='node_52', default_entry=DefaultEntry(action_id=44, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor40', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 40), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[41], actions=['egress_queue_depth_monitor40'], next_tables={'egress_queue_depth_monitor40': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=41, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor48', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 48), ('column', 69), ('source_fragment', '= EVENT_ORIGINATOR_LOCAL_SWITCH; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[42], actions=['egress_queue_depth_monitor48'], next_tables={'egress_queue_depth_monitor48': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=42, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_queue_depth_monitor56', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 56), ('column', 73), ('source_fragment', '= EVENT_EGR_QUEUE_UNCHANGED; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[43], actions=['egress_queue_depth_monitor56'], next_tables={'egress_queue_depth_monitor56': 'EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table'}, direct_meters=None, base_default_next='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', default_entry=DefaultEntry(action_id=43, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table', id=34, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 22), ('column', 10), ('source_fragment', 'egress_rate_monitor_table')])"), key=[Key(match_type=<MatchType.EXACT: 'exact'>, name='standard_metadata.egress_port', target=['standard_metadata', 'egress_port'], mask=None)], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[40], actions=['EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow'], next_tables={'EgressPipeImpl.egress_rate_monitor_control_block.monitor_outgoing_flow': 'node_58'}, direct_meters='EgressPipeImpl.egress_rate_monitor_control_block.egress_meter', base_default_next='node_58', default_entry=DefaultEntry(action_id=40, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_egress_rate_monitor35', id=35, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 35), ('column', 71), ('source_fragment', '= true; ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[45], actions=['egress_rate_monitor35'], next_tables={'egress_rate_monitor35': 'node_60'}, direct_meters=None, base_default_next='node_60', default_entry=DefaultEntry(action_id=45, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control97', id=36, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 97), ('column', 51), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[46], actions=['rate_control97'], next_tables={'rate_control97': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=46, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_rate_control101', id=37, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 101), ('column', 49), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[47], actions=['rate_control101'], next_tables={'rate_control101': 'node_65'}, direct_meters=None, base_default_next='node_65', default_entry=DefaultEntry(action_id=47, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine309', id=38, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 309), ('column', 16), ('source_fragment', 'exit')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[48], actions=['spine309'], next_tables={'spine309': 'node_67'}, direct_meters=None, base_default_next='node_67', default_entry=DefaultEntry(action_id=48, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine313', id=39, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 313), ('column', 40), ('source_fragment', '=')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[49], actions=['spine313'], next_tables={'spine313': 'node_69'}, direct_meters=None, base_default_next='node_69', default_entry=DefaultEntry(action_id=49, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine325', id=40, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 325), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ ((bit<32>)MAX_PORTS_IN_SWITCH * 2), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[50], actions=['spine325'], next_tables={'spine325': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=50, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine328', id=41, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 328), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port)+ (bit<32>)MAX_PORTS_IN_SWITCH, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[51], actions=['spine328'], next_tables={'spine328': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=51, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine331', id=42, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 331), ('column', 16), ('source_fragment', 'clone3(CloneType.E2E, 255, {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[52], actions=['spine331'], next_tables={'spine331': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=52, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine334', id=43, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 334), ('column', 17), ('source_fragment', 'clone3(CloneType.E2E, (bit<32>)(standard_metadata.ingress_port), {standard_metadata, local_metadata})')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[53], actions=['spine334'], next_tables={'spine334': 'node_77'}, direct_meters=None, base_default_next='node_77', default_entry=DefaultEntry(action_id=53, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid', id=44, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 345), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[36], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine346'}, direct_meters=None, base_default_next='tbl_spine346', default_entry=DefaultEntry(action_id=36, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine346', id=45, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 346), ('column', 16), ('source_fragment', 'hdr.ethernet.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[55], actions=['spine346'], next_tables={'spine346': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=55, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_set_all_header_invalid_0', id=46, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 371), ('column', 16), ('source_fragment', 'set_all_header_invalid()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[37], actions=['EgressPipeImpl.set_all_header_invalid'], next_tables={'EgressPipeImpl.set_all_header_invalid': 'tbl_spine372'}, direct_meters=None, base_default_next='tbl_spine372', default_entry=DefaultEntry(action_id=37, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine372', id=47, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 372), ('column', 16), ('source_fragment', 'hdr.packet_in.setValid(); ...')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[56], actions=['spine372'], next_tables={'spine372': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=56, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_spine391', id=48, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 391), ('column', 16), ('source_fragment', 'p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port)')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[57], actions=['spine391'], next_tables={'spine391': 'node_85'}, direct_meters=None, base_default_next='node_85', default_entry=DefaultEntry(action_id=57, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack', id=49, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 394), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[38], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=38, action_const=True, action_data=[], action_entry_const=True), action_profile=None), Table(name='tbl_build_p2p_feedback_with_fake_ack_for_increase', id=50, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 397), ('column', 20), ('source_fragment', 'build_p2p_feedback_with_fake_ack_for_increase()')])"), key=[], match_type=<MatchType.EXACT: 'exact'>, type=<TableType.SIMPLE: 'simple'>, max_size=1024, with_counters=False, support_timeout=False, action_ids=[39], actions=['EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase'], next_tables={'EgressPipeImpl.build_p2p_feedback_with_fake_ack_for_increase': None}, direct_meters=None, base_default_next=None, default_entry=DefaultEntry(action_id=39, action_const=True, action_data=[], action_entry_const=True), action_profile=None)], action_profiles=[], conditionals=[Conditional(name='node_50', id=16, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 298), ('column', 12), ('source_fragment', 'standard_metadata.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_NORMAL')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1401fa0>, true_next='tbl_egress_queue_depth_monitor35', false_next='node_77'), Conditional(name='node_52', id=17, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 37), ('column', 15), ('source_fragment', 'standard_metadata.deq_qdepth >= (last_updated_deq_depth + EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1407430>, true_next='tbl_egress_queue_depth_monitor40', false_next='node_54'), Conditional(name='node_54', id=18, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_queue_depth_monitor.p4'), ('line', 47), ('column', 21), ('source_fragment', 'standard_metadata.deq_qdepth < (last_updated_deq_depth - EGRESS_QUEUE_DEPTH_THRESHOLD)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1407880>, true_next='tbl_egress_queue_depth_monitor48', false_next='tbl_egress_queue_depth_monitor56'), Conditional(name='node_58', id=19, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/egress_rate_monitor.p4'), ('line', 34), ('column', 12), ('source_fragment', 'local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1407a90>, true_next='tbl_egress_rate_monitor35', false_next='node_60'), Conditional(name='node_60', id=20, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 93), ('column', 12), ('source_fragment', 'hdr.tcp.isValid() && (local_metadata.rate_control_allowed_for_the_tcp_flow == RATE_CONTROL_ALLOWED_FOR_THE_FLOW) && (local_metadata.rate_control_event != RATE_CONTROL_EVENT_ALREADY_APPLIED )')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408100>, true_next='node_61', false_next='node_65'), Conditional(name='node_61', id=21, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 96), ('column', 16), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color >= (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color> (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408550>, true_next='tbl_rate_control97', false_next='node_63'), Conditional(name='node_63', id=22, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/rate_control.p4'), ('line', 100), ('column', 22), ('source_fragment', '(local_metadata.egress_rate_event_hdr.egress_traffic_color < (bit<32>) YELLOW ) && (local_metadata.ingress_rate_event_hdr.ingress_traffic_color <= (bit<32>) GREEN)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf14089a0>, true_next='tbl_rate_control101', false_next='node_65'), Conditional(name='node_65', id=23, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 308), ('column', 16), ('source_fragment', 'local_metadata.is_multicast')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408b50>, true_next='tbl_spine309', false_next='node_67'), Conditional(name='node_67', id=24, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 312), ('column', 16), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f7cf1408ee0>, true_next='tbl_spine313', false_next='node_69'), Conditional(name='node_69', id=25, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 323), ('column', 15), ('source_fragment', 'is_recirculation_needed && ( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140a910>, true_next='tbl_spine325', false_next='node_71'), Conditional(name='node_71', id=26, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 326), ('column', 22), ('source_fragment', '( (local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) ) && ( local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate )')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140d160>, true_next='tbl_spine328', false_next='node_73'), Conditional(name='node_73', id=27, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 329), ('column', 24), ('source_fragment', 'local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140d4f0>, true_next='tbl_spine331', false_next='node_75'), Conditional(name='node_75', id=28, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 332), ('column', 25), ('source_fragment', '(local_metadata.rate_control_event ==RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH) || (local_metadata.rate_control_event ==RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH)')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140d940>, true_next='tbl_spine334', false_next='node_77'), Conditional(name='node_77', id=29, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/CONSTANTS.p4'), ('line', 74), ('column', 50), ('source_fragment', '0; ...')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140db50>, true_next='node_78', false_next=None), Conditional(name='node_78', id=30, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 344), ('column', 16), ('source_fragment', 'standard_metadata.egress_port == 0')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140dd60>, true_next='tbl_set_all_header_invalid', false_next='node_81'), Conditional(name='node_81', id=31, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 368), ('column', 22), ('source_fragment', 'standard_metadata.egress_port == 255')])"), expression=<P416JsonParser.Expression object at 0x7f7cf140df70>, true_next='tbl_set_all_header_invalid_0', false_next='tbl_spine391'), Conditional(name='node_85', id=32, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 393), ('column', 20), ('source_fragment', 'local_metadata.rate_control_event == RATE_DECREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f7cf14101c0>, true_next='tbl_build_p2p_feedback_with_fake_ack', false_next='node_87'), Conditional(name='node_87', id=33, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 396), ('column', 25), ('source_fragment', 'local_metadata.rate_control_event == RATE_INCREASE_EVENT_NEED_TO_BE_APPLIED_IN_THIS_SWITCH')])"), expression=<P416JsonParser.Expression object at 0x7f7cf14103d0>, true_next='tbl_build_p2p_feedback_with_fake_ack_for_increase', false_next=None)])], checksums=[Checksum(name='cksum', id=0, source_info=SourceInfo(srcinfo="OrderedDict([('filename', 'p4src/src/spine.p4'), ('line', 422), ('column', 8), ('source_fragment', 'update_checksum(hdr.ndp.isValid(), ...')])"), target=['icmpv6', 'checksum'], type='generic', calculation='calc_0', verify=False, update=True, if_cond=IfCond(type=<ValueType.EXPRESSION: 'expression'>, value=IfCondValue(op=<FluffyOp.D2_B: 'd2b'>, right=Element(type=<ValueType.FIELD: 'field'>, value=['ndp', '$valid$']), left=None)))], force_arith=[], extern_instances=[], field_aliases=[['queueing_metadata.enq_timestamp', ['standard_metadata', 'enq_timestamp']], ['queueing_metadata.enq_qdepth', ['standard_metadata', 'enq_qdepth']], ['queueing_metadata.deq_timedelta', ['standard_metadata', 'deq_timedelta']], ['queueing_metadata.deq_qdepth', ['standard_metadata', 'deq_qdepth']], ['intrinsic_metadata.ingress_global_timestamp', ['standard_metadata', 'ingress_global_timestamp']], ['intrinsic_metadata.egress_global_timestamp', ['standard_metadata', 'egress_global_timestamp']], ['intrinsic_metadata.mcast_grp', ['standard_metadata', 'mcast_grp']], ['intrinsic_metadata.egress_rid', ['standard_metadata', 'egress_rid']], ['intrinsic_metadata.priority', ['standard_metadata', 'priority']]], program=Program(programInfo='p4src/src/spine.p4'), meta=Meta(version=[2, 23], compiler='https://github.com/p4lang/p4c'))
[10-15 23:25:00] p11574 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:22:57] p15003 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:23:20] p15037 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:23:59] p15068 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:25:12] p15181 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:26:48] p15238 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:27:27] p15271 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:27:41] p15342 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:28:57] p15391 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:07] p15419 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:27] p15447 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:44] p15499 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:29:54] p15530 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.downstream_routing_table_hit
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_rate_based_path
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.target_mac_addr
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_map_index
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.do_l3_l2
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is icmpv6.type
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_pkt_rcvd_from_downstream
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.type
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_1
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_2
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.ndp_processing_control_block_host_ipv6_tmp
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_multi_criteria_paths
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_delay_proc
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.ingress_port
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_fake_ack_for_rate_ctrl_required
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_based_path
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_port_rate_value_range
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_used_path
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.src_addr
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.minimum_group_members_requirement
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flow_inter_packet_gap
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_depth_based_path
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_pkt_seen_time
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_depth
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_rate
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.flags
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_depth_value_range
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.hop_limit
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.dst_addr
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.traffic_class
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.event_src_type
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_dp_only_multipath_algo_processing_required
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_rate_based_path
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.next_hdr
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_3
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_downstream_port
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.egress_spec
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.mcast_grp
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_rate_event_data
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.length
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_upstream_port
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_0
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_pkt_toward_host
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:32:46] p15645 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_depth
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.src_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.length
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.flags
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.ingress_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.traffic_class
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_fake_ack_for_rate_ctrl_required
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.mcast_grp
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.ndp_processing_control_block_host_ipv6_tmp
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_1
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_0
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.minimum_group_members_requirement
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.target_mac_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_pkt_rcvd_from_downstream
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_downstream_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flow_inter_packet_gap
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_pkt_toward_host
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_dp_only_multipath_algo_processing_required
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_rate
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_delay_proc
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.downstream_routing_table_hit
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.dst_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_map_index
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is icmpv6.type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_3
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_used_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_depth_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.hop_limit
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_rate_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_depth_value_range
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.event_src_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_port_rate_value_range
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_rate_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.egress_spec
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.next_hdr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_upstream_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_2
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.do_l3_l2
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_multi_criteria_paths
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_rate_event_data
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_pkt_seen_time
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_depth
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet.src_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.length
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.flags
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.ingress_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.traffic_class
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_fake_ack_for_rate_ctrl_required
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.mcast_grp
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.ndp_processing_control_block_host_ipv6_tmp
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_1
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_0
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.minimum_group_members_requirement
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.target_mac_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.is_pkt_rcvd_from_downstream
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_packet_from_downstream_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flow_inter_packet_gap
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_pkt_toward_host
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_dp_only_multipath_algo_processing_required
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_rate
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_delay_proc
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.downstream_routing_table_hit
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet.dst_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_map_index
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is icmpv6.type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_3
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_used_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_depth_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.hop_limit
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_rate_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_depth_value_range
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.event_src_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_port_rate_value_range
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_rate_based_path
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.egress_spec
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.next_hdr
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_packet_from_upstream_port
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_2
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.do_l3_l2
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.found_multi_criteria_paths
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_rate_event_data
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp
[10-16 00:33:37] p15701 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_pkt_seen_time
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_multi_criteria_paths
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.next_hdr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_downstream_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.ndp_processing_control_block_host_ipv6_tmp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.mcast_grp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_upstream_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.src_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.traffic_class
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_used_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is icmpv6.type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_pkt_toward_host
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_depth_value_range
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_rate
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_delay_proc
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_3
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.target_mac_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.dst_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.egress_spec
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.downstream_routing_table_hit
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_dp_only_multipath_algo_processing_required
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.flags
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.length
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_pkt_seen_time
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_rate_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_depth_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.hop_limit
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_rate_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_2
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.do_l3_l2
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.ingress_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_fake_ack_for_rate_ctrl_required
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_port_rate_value_range
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_pkt_rcvd_from_downstream
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_map_index
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flow_inter_packet_gap
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.minimum_group_members_requirement
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.found_multi_criteria_paths
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.next_hdr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_packet_from_downstream_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.ndp_processing_control_block_host_ipv6_tmp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.mcast_grp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_packet_from_upstream_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet.src_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.traffic_class
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_used_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is icmpv6.type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_pkt_toward_host
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_depth_value_range
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_rate
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_delay_proc
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_3
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.target_mac_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet.dst_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.egress_spec
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.downstream_routing_table_hit
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_dp_only_multipath_algo_processing_required
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.flags
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.length
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_pkt_seen_time
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_rate_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_depth_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp.type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.hop_limit
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_rate_based_path
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_2
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.do_l3_l2
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.ingress_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_fake_ack_for_rate_ctrl_required
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.egr_port_rate_value_range
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.is_pkt_rcvd_from_downstream
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_map_index
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.flow_inter_packet_gap
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.minimum_group_members_requirement
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.temp_src_addr_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_5
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.ack_no
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.egress_queue_depth_monitor_control_block_last_updated_deq_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.dst_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.egress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.ingress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_7
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.ingress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.ingress_rate_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.egress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.temp_src_port_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.egress_rate_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.temp_ack_no_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_8
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.src_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_4
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.temp_src_addr_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.seq_no
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.is_recirculation_needed_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.temp_ack_no_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.ack_control_flag
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.egress_queue_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_9
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.payload_len
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.egress_queue_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_6
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.window
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.egress_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.temp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.rate_control_allowed_for_the_tcp_flow
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.rate_control_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_10
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.egress_queue_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.temp_src_port_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.ether_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.ingress_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.temp_src_addr_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_5
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv4
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.ack_no
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.egress_queue_depth_monitor_control_block_last_updated_deq_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.dst_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.egress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.ingress_rate_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_7
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.ingress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.ingress_rate_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.egress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.temp_src_port_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.egress_rate_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.temp_ack_no_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_8
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.$valid$
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.src_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_4
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.temp_src_addr_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is udp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.seq_no
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.is_recirculation_needed_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.temp_ack_no_1
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.ack_control_flag
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.egress_queue_event_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is icmpv6
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_9
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.payload_len
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.egress_queue_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_6
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.window
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata.egress_port
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.temp
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.rate_control_allowed_for_the_tcp_flow
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.userMetadata.rate_control_event
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.tmp_10
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.egress_queue_event_data
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is scalars.temp_src_port_0
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet.ether_type
[10-16 00:34:00] p15735 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.ingress_port
[10-16 00:34:46] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.event_src_type
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.do_l3_l2
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_rate
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.ndp_processing_control_block_host_ipv6_tmp
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_0
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_based_path
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.next_hdr
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_traffic_color
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.instance_type
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.minimum_group_members_requirement
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flow_inter_packet_gap
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_used_path
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_rate_event_data
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_delay_path_rate_status
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_rate_event_hdr.egress_rate_event_data
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_multi_criteria_paths
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_upstream_port
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_pkt_rcvd_from_downstream
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_port_rate_value_range
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.target_mac_addr
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_rate_based_path
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_depth
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_packet_from_downstream_port
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.hop_limit
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.egr_queue_depth_value_range
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.egress_queue_event_data
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.ingress_port
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_egr_queue_rate
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_3
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.downstream_routing_table_hit
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_fake_ack_for_rate_ctrl_required
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.src_addr
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_1
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.length
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_dp_only_multipath_algo_processing_required
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_last_pkt_seen_time
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.ingress_traffic_color
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.mcast_grp
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_depth_based_path
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.cp_assisted_multicriteria_upstream_policy_routing_control_block_low_utilization_path_rate_status
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.type
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.found_egr_queue_rate_based_path
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ingress_rate_event_hdr.event_src_type
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_event_hdr.event_src_type
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_ing_queue_depth
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is icmpv6.type
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.src_addr
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.tmp_2
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_control_pkt_from_delay_proc
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is flag_hdr.is_pkt_toward_host
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is standard_metadata.egress_spec
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ethernet.dst_addr
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.dst_addr
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.flowlet_map_index
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ndp.flags
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is scalars.userMetadata.is_multicast
[10-16 00:34:51] p15765 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.traffic_class
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv4
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is udp
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.$valid$
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is icmpv6
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp
[10-16 00:38:02] p15948 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is flag_hdr
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is standard_metadata
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is tcp.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:79} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is udp
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is icmpv6
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ndp
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.$valid$
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ethernet
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv4
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6
[10-16 00:39:03] p16007 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is flag_hdr
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is standard_metadata
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_out
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is icmpv6
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_out
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is tcp
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ipv6
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_in
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ipv4
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is udp
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ndp
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ethernet
[10-16 02:05:26] p18807 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is standard_metadata
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_out
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is flag_hdr
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:91} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is tcp
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ndp
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is icmpv6
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ethernet
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_in
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ipv4
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is udp
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is ipv6
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:07:00] p18857 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:103} INFO - Field not found in map . The field is packet_out
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 02:28:49] p19905 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 02:29:05] p19939 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 02:37:00] p20299 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 02:37:36] p20343 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 02:38:30] p20434 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:14:39] p10488 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:16:16] p10568 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:17:00] p10609 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:17:08] p10640 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:30:07] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:30:09] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:30:16] p10960 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:36:47] p11258 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:37:48] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:37:51] p11334 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:40:45] p11628 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 14:45:44] p12137 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:21:58] p18597 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:23:17] p18688 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:23:49] p18722 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:27:17] p18821 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:27:46] p18891 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:28:13] p18930 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:28:38] p18956 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:29:09] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:30:11] p19006 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:30:28] p19134 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:31:09] p19180 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:31:29] p19233 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:35:00] p19492 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:36:05] p19601 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:36:35] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:36:36] p19634 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:38:46] p20183 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:38:54] p20213 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:44:18] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 17:44:19] p20364 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 17:46:39] p20626 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 18:03:47] p21412 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 18:04:00] p21454 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 18:05:47] p21522 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is local_metadata.ingress_conditioanl_carry
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is local_metadata.ingress_conditioanl_carry
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is local_metadata.egress_conditioanl_carry
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is local_metadata.egress_conditioanl_carry
[10-16 18:06:38] p21562 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 18:10:43] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:36} INFO - Loading pipelines
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/P4ProgramParser/P416JsonParser.py:1318} INFO - Runtime data is not needed to be parsed in our system. passing it 
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_last_used_port
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is standard_metadata
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ingress_rate_event_hdr
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_rate_value_map
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_rate_event_hdr
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is egress_queue_event_hdr
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is IngressPipeImpl.cp_assisted_multicriteria_upstream_policy_routing_control_block.flowlet_lasttime_map
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is flag_hdr
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:92} INFO - Field not found in map . The field is tcp.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ndp
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_out
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is EgressPipeImpl.egress_queue_depth_monitor_control_block.port_last_updated_egress_queue_avg_depth
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ethernet
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is udp
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp.$valid$
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is tcp
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv4
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is ipv6
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is packet_in
[10-16 18:10:44] p21794 {/home/deba/Desktop/P416CompilerBackend/src/DependencyAnlyzer/P4ProgramGraph.py:104} INFO - Field not found in map . The field is icmpv6
