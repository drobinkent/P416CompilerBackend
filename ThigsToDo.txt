TCAMMatFieldCount etar asole meaning nai. eta full code theke tulte hobe

simiarly SRAM MAT er jonno


*) assyme Node has two child B and C.
B has two child





Notes:

1) we do not supprt parser stack
2) P4 14 is not fully backward comaptible
3) the bmv is also not backwardnot compatible in all cases
3) reinitializeResourcesForNewPiepeline ei function a action crossbar bitwodth amra 0 te reinitilize korchi eta bodh hoy maximum of existing tables hobe.
because for a ingress pipeline there can be n tables embedded on a stage. but only one will be executed at a time. so for ingress pipeline in worst
the maximum of the action bitwidth will be used. therefore for egress the rest will remain.


Our mapping algorithm
at first maps the mats that useing indirect stateful memories. so we have to explain this in mapping algo and we also have to explain the difference between direct
and indirect stateful memory usage







**) How to handle counter and meter

indirect counter and meter support :
in Action class there is a function "getListOfStatefulMemoriesBeingUsed" here we are suporting only register read and write.
if we want to add counter and meter, we need to add suport for both of thm in this function. then it will add indirect counter and meter dependency in the TDG.

Direct meter and counter support:
These are connnected with a specific table entry. so there is no depndency with other table. so basically we do not need anything extra, only
in embedding an action we need to calculate what is their memory requirement and how much memory they do need as part of supporting the action.



*) memory usage optimization:
will look at later part. but only needs to handle two function improvement. the indirect stateful memory allocation and action emmory allocation. These two function needs to
utilize multi word packing to improve memory usage. Must also need to accomodate the amount of memory port use in action part of indirect and direct register


*) table embedding a direct stateful memory support in action is needed. it should be simple in implementation

*) our memory packing is not good. for example assume someone using a single register. our algorithm will allocate a whole block for it.
To solve that we ned to model a full memory layout. and need to decide where to keep which elements.

*) we are basically not allocating fixed amount of sram blocks for action. we are allocting them from totla sram blocks. need to
modify the hardwre description where we have said fixed number of sram blocks. also we are saying that we are using fixed number of sram blocks. but we can also support
per mat rule sram entries.


-------------------------- VVI things to do


c) direct stateful memory allocation is not done. add it.
d) checking register capability







==========================Latency calculation

for all node in a single stage set teir start time to 0.
for every physical stage caculate if their is any 1 cycel dependency among the nodes. if have then set their start time accordingly.
for example table a  and b are in same stage and they have successor or reverse match depndency. theirfore a will start at 0 and b will start at 1.
set in this way for all the tables embedded on every stage.

start form stage 1 (0 is initialized as previous pragraph). sort the tables in increasing order of their start time.
Take the table that start earliest and compute whther if it has any dependency with any node embedded in previous stage
and calculate what is it's possible start times. Also check its predeccsoro generated from tdg and find what is the possible start times.
maximum of them will be its possible start time.



ingress embed korar pore egress embed korar age reintitialize korte hobe -- shekhane shudhu action memory load ing er jonno used portwidth ta k 0 kora lagbe.

*) indirect stateful memory user table gulo k embed kore tarpor tader maximum action width k nicchi crossbar a.



RMW support

we have a list of all headers and indirect registers.
we can deep copy all of them. then we will analyze one or more action of tdg to analyze who is operating on whom.

a) if we find more than one action on a header field, we have to divide it in multiple stages.
b) if we find rmw sequence we need to embed on identify them

at first give every primitive operations in a action a increasing number which is already given by an array index. if we are combining moe than one actions then we can
add the previsous action max primitive + current index

register -- read to some header or metadata (index i) -- write (index k
header/metadata -- modify (index j)

if i<j<k then we can say it is a RMW sequence.


---------------------------- VVI ---------------
1) need to check one thing, if a table has no match key then how many blocks we are allocating. This is  a crucial issue. need to investigate it.
2) write a function to check whther a matNode's action requirement ( alu, memory port etc.) can be accomodated within the available buidget.
and write another function to allocate direct stateful memory's resource requirement checking

then use them in condition checking then write function to allccate reource

then write function for shwing the results in nice way

---- Look at the previous example of how to serialize the operations in an action. We will do this for all actions. And do a bit of checking to show that we do check the instructions.

case to be aded : 2 reads in one action is not allowed. 2 operations on a header or metadata not allowed. but we may suppor tread modify write. But no register action. we will say that
these are future goals
-- task action analysis



--------------------------- VVI

last a kokhon ekta program k embed kora jay na setar decision making ta clear na. at least jokhon embed korte parena seta clear message diye bol auchit amader


-------- VVI

indirect stateful memory r jegulo kono stateful memory dependency nai segulo k non stateful memory depndency r moto embed korte hobe.
so ekta function likhte hobe jeta

both unnembedded indirectstateful memory r direct stateful memory r total kore bolbe j embed kora jay ki na. r gele embed kore dibe.

A table might have both indirect stateful memory and direct stateful memory on that case we need to make decision


------- VVI

hashing way ta j amra input dichi onek function a seta k avoid korte hobe



----vvi

probably we need to writ a function to ge the bitrwidth of a hrxstring and use it in action bitwidth calculation