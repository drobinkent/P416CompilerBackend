# 0 "l2l3Simple.p4"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "l2l3Simple.p4"
# 1 "includes/headers.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc. 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header_type ipv4_t {
    fields {
        version : 4;
        ihl : 4;
        diffserv : 8;
        totalLen : 16;
        identification : 16;
        flags : 3;
        fragOffset : 13;
        ttl : 8;
        protocol : 8;
        hdrChecksum : 16;
        srcAddr : 32;
        dstAddr: 32;
    }
}

header_type vlan_tag_t {
    fields {
        pcp : 3;
        cfi : 1;
        vid : 12;
        etherType : 16;
    }
}
# 2 "l2l3Simple.p4" 2
# 1 "includes/parser.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc. 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

parser start {
    return parse_ethernet;
}



header ethernet_t ethernet;

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        0x8100, 0x9100, 0x9200, 0x9300 : parse_vlan;
        0x0800 : parse_ipv4;
        default: ingress;
    }
}

header ipv4_t ipv4;

field_list ipv4_checksum_list {
        ipv4.version;
        ipv4.ihl;
        ipv4.diffserv;
        ipv4.totalLen;
        ipv4.identification;
        ipv4.flags;
        ipv4.fragOffset;
        ipv4.ttl;
        ipv4.protocol;
        ipv4.srcAddr;
        ipv4.dstAddr;
}

field_list_calculation ipv4_checksum {
    input {
        ipv4_checksum_list;
    }
    algorithm : csum16;
    output_width : 16;
}

calculated_field ipv4.hdrChecksum {
    verify ipv4_checksum;
    update ipv4_checksum;
}

parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}


header vlan_tag_t vlan_tag;
parser parse_vlan {
    extract(vlan_tag);
    return select(latest.etherType) {
        //ETHERTYPE_VLAN : parse_vlan;
        0x0800 : parse_ipv4;
        default: ingress;
    }
}
# 3 "l2l3Simple.p4" 2
# 1 "includes/tables.p4" 1
# 10 "includes/tables.p4"
table routable_check_multicast {
    reads {
     ethernet.srcAddr: exact;
     ethernet.dstAddr: exact;
     vlan_tag.vid: exact;
    }
    actions {
     multicast_action;
     nop;
    }
    size : 64;
}

action multicast_action() {
    modify_field(ingress_metadata.is_multicast, 1);
}

table routable_check_routable {
    reads {
     ethernet.srcAddr: exact;
     ethernet.dstAddr: exact;
     vlan_tag.vid: exact;
    }
    actions {
     routable_action;
    }
    size : 64;
}

action routable_action() {
    modify_field(ingress_metadata.is_routable, 1);
}



table unicast_routing {
    reads {
     ipv4.dstAddr : ternary;
    }
    actions {
    set_next_hop;
    }
    size : 32000;
}

action set_next_hop(smac, dmac, vlan_id) {
    modify_field(ethernet.srcAddr, smac);
    modify_field(ethernet.dstAddr, dmac);
    modify_field(vlan_tag.vid, vlan_id);
}

table multicast_routing {
    reads {
    ipv4.dstAddr : ternary;
    }

    actions {
        set_mcast_idx;
    }
    size : 24000;
}

action set_mcast_idx(idx) {
    modify_field(ingress_metadata.mc_idx, idx);
}

table mac_learning {
    reads {
     ethernet.srcAddr : exact;
 vlan_tag.vid: exact;
    }
    actions {
      nop;
    }
    size : 68000;
}

action nop() {
}
table igmp {
    reads {
        ipv4.dstAddr: ternary;
     vlan_tag.vid: exact;
        standard_metadata.ingress_port : exact;
    }
    actions {
      set_mcast_idx;
    }
    size : 24000;
}

table switching {
    reads {
     ethernet.dstAddr : exact;
     vlan_tag.vid: exact;
    }
    actions {
     set_egress;
    }
    size : 68000;
}

action set_egress(port) {
    modify_field(standard_metadata.egress_spec, port);
}


table acl {
    reads {
     ethernet.srcAddr : ternary;
     ethernet.dstAddr : ternary;
     vlan_tag.vid: exact;
     standard_metadata.ingress_port : exact;
     ingress_metadata.is_routable : ternary;
     ingress_metadata.is_multicast : ternary;
     ipv4.dstAddr : ternary;
     standard_metadata.egress_spec : ternary;
    }
    actions {
     set_drop_code;
    }
    size : 1600;
}

action set_drop_code(code) {
    modify_field(ingress_metadata.drop_code, code);
}
# 4 "l2l3Simple.p4" 2

/* METADATA */
header_type ingress_metadata_t {
    fields {
        is_multicast : 1;
        is_routable : 1;
 mc_idx : 16;
 drop_code : 16;
    }
}

metadata ingress_metadata_t ingress_metadata;

control ingress {
 apply(mac_learning);

 apply(routable_check_multicast) {
    multicast_action {
        apply(multicast_routing);
        apply(igmp);
    }
    default {
        apply(routable_check_routable) {
            routable_action {
                apply(unicast_routing);
            }
        }
        apply(switching);
        apply(acl);
    }
 }
}
