# 0 "l2l3complex.p4"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "l2l3complex.p4"
/*
Copyright (c) 2015-2016 by The Board of Trustees of the Leland
Stanford Junior University.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


 Author: Lisa Yan (yanlisa@stanford.edu)
*/

# 1 "defines.p4" 1
/*
Copyright (c) 2015-2016 by The Board of Trustees of the Leland
Stanford Junior University.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


 Author: Lisa Yan (yanlisa@stanford.edu)
*/

/* Should be 16 tables
 * Do we need check_ipv6_size though? it kinda sucks
 */
# 22 "l2l3complex.p4" 2
# 1 "parser.p4" 1
/*
Copyright (c) 2015-2016 by The Board of Trustees of the Leland
Stanford Junior University.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


 Author: Lisa Yan (yanlisa@stanford.edu)
*/

parser start {
    return parse_ethernet;
}
# 41 "parser.p4"
/* Tunnel types */
# 67 "parser.p4"
header ethernet_t ethernet;

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        0x8100, 0x9100 : parse_vlan; 0x8847 : parse_mpls; 0x0800 : parse_ipv4; 0x86dd : parse_ipv6; 0x0806 : parse_arp_rarp; 0x8035 : parse_arp_rarp; default: ingress;
    }
}


header vlan_tag_t vlan_tag;

parser parse_vlan {
    extract(vlan_tag);
    return select(latest.etherType) {
        0x8847 : parse_mpls; 0x0800 : parse_ipv4; 0x86dd : parse_ipv6; 0x0806 : parse_arp_rarp; 0x8035 : parse_arp_rarp; default: ingress;
    }
}


header mpls_t mpls;

parser parse_mpls {
    extract(mpls);
    /*return select(latest.bos) {
        //0 : parse_mpls;
        default: ingress;
    }*/
    return ingress;
}
# 120 "parser.p4"
header ipv4_t ipv4;

field_list ipv4_checksum_list {
        ipv4.version;
        ipv4.ihl;
        ipv4.diffserv;
        ipv4.totalLen;
        ipv4.identification;
        ipv4.flags;
        ipv4.fragOffset;
        ipv4.ttl;
        ipv4.protocol;
        ipv4.srcAddr;
        ipv4.dstAddr;
}

field_list_calculation ipv4_checksum {
    input {
        ipv4_checksum_list;
    }
    algorithm : csum16;
    output_width : 16;
}

calculated_field ipv4.hdrChecksum {
    verify ipv4_checksum if (ipv4.ihl == 5);
    update ipv4_checksum if (ipv4.ihl == 5);
}

parser parse_ipv4 {
    extract(ipv4);
    return select(latest.fragOffset, latest.ihl, latest.protocol) {
        0x501 : parse_icmp;
        0x506 : parse_tcp;
        0x511 : parse_udp;
        0x52f : parse_gre;
        default: ingress;
    }
}

header ipv6_t ipv6;

parser parse_ipv6 {
    extract(ipv6);
    return select(latest.nextHdr) {
        58 : parse_icmp;
        6 : parse_tcp;
        17 : parse_udp;
        47 : parse_gre;
        default: ingress;
    }
}

header icmp_t icmp;

parser parse_icmp {
    extract(icmp);
    return ingress;
}




header tcp_t tcp;
parser parse_tcp {
    extract(tcp);
    return ingress;
}

header udp_t udp;

parser parse_udp {
    extract(udp);
    return ingress;
}




header gre_t gre;

parser parse_gre {
    extract(gre);
    return ingress;
}



header arp_rarp_t arp_rarp;

parser parse_arp_rarp {
    extract(arp_rarp);
    return ingress;
}
# 23 "l2l3complex.p4" 2
# 1 "headers.p4" 1
/*
Copyright (c) 2015-2016 by The Board of Trustees of the Leland
Stanford Junior University.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


 Author: Lisa Yan (yanlisa@stanford.edu)
*/

header_type hop_metadata_t {
    fields {
        bd_index: 16;
        ig_lif: 16;
        vrf_index: 12;
        urpf: 2;
        bd_acl_label: 24;
        lif_acl_label: 24;
        ipv4_next_hop_index: 16;
        ipv4_ecmp_index: 16;
        ipv6_next_hop_index: 16;
        ipv6_ecmp_index: 16;
        ipv6_prefix : 64;
        l3_hash : 16;
        l2_hash : 16;
        mcast_grp : 16;
        urpf_check_fail : 1;
        drop_code : 8;
        eg_lif : 16;
        storm_control_color : 1; /* 0: pass, 1: fail */
    }
}
metadata hop_metadata_t hop_metadata;

field_list l3_hash_fields_ipv4 {
    ipv4.srcAddr;
    ipv4.dstAddr;
    ipv4.protocol;
    tcp.srcPort;
    tcp.dstPort;
    udp.srcPort;
    udp.dstPort;
}

field_list_calculation l3_hash_ipv4 {
    input {
        l3_hash_fields_ipv4;
    }
    algorithm : crc16;
    output_width : 36;
}

field_list l3_hash_fields_ipv6 {
    ipv6.srcAddr;
    ipv6.dstAddr;
    ipv6.nextHdr;
    tcp.srcPort;
    tcp.dstPort;
    udp.srcPort;
    udp.dstPort;
}

field_list_calculation l3_hash_ipv6 {
    input {
        l3_hash_fields_ipv6;
    }
    algorithm : crc16;
    output_width : 36;
}

field_list l2_hash_fields {
    ethernet.srcAddr;
    ethernet.dstAddr;
    ethernet.etherType;
}

field_list_calculation l2_hash_calc {
    input {
        l2_hash_fields;
    }
    algorithm : crc16;
    output_width : 36;
}

field_list mac_learn_digest {
    hop_metadata.bd_index;
    ethernet.srcAddr;
    hop_metadata.ig_lif;
}

header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header_type vlan_tag_t {
    fields {
        pcp : 3;
        cfi : 1;
        vid : 12;
        etherType : 16;
    }
}

header_type mpls_t {
    fields {
        label : 20;
        exp : 3;
        bos : 1;
        ttl : 8;
    }
}

header_type ipv4_t {
    fields {
        version : 4;
        ihl : 4;
        diffserv : 8;
        totalLen : 16;
        identification : 16;
        flags : 3;
        fragOffset : 13;
        ttl : 8;
        protocol : 8;
        hdrChecksum : 16;
        srcAddr : 32;
        dstAddr: 32;
    }
}

header_type ipv6_t {
    fields {
        version : 4;
        trafficClass : 8;
        flowLabel : 20;
        payloadLen : 16;
        nextHdr : 8;
        hopLimit : 8;
        srcAddr : 128;
        dstAddr : 128;
    }
}

header_type icmp_t {
    fields {
        type_ : 8;
        code : 8;
        hdrChecksum : 16;
    }
}

header_type tcp_t {
    fields {
        srcPort : 16;
        dstPort : 16;
        seqNo : 32;
        ackNo : 32;
        dataOffset : 4;
        res : 3;
        ecn : 3;
        ctrl : 6;
        window : 16;
        checksum : 16;
        urgentPtr : 16;
    }
}

header_type udp_t {
    fields {
        srcPort : 16;
        dstPort : 16;
        length_ : 16;
        checksum : 16;
    }
}

header_type gre_t {
    fields {
        C : 1;
        R : 1;
        K : 1;
        S : 1;
        s : 1;
        recurse : 3;
        flags : 5;
        ver : 3;
        proto : 16;
    }
}

header_type arp_rarp_t {
    fields {
        hwType : 16;
        protoType : 16;
        hwAddrLen : 8;
        protoAddrLen : 8;
        opcode : 16;
    }
}
# 24 "l2l3complex.p4" 2
# 1 "actions.p4" 1
/*
Copyright (c) 2015-2016 by The Board of Trustees of the Leland
Stanford Junior University.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


 Author: Lisa Yan (yanlisa@stanford.edu)
*/

action on_hit() {
}
action on_miss() {
}
action nop() {
}

action action_drop(drop_reason) {
    modify_field(hop_metadata.drop_code, drop_reason);
    drop();
}

action set_bd_index_and_ig_lif(bd_index, ig_lif) {
    modify_field(hop_metadata.bd_index, bd_index);
    modify_field(hop_metadata.ig_lif, ig_lif);
}

action generate_learn_notify() {
    //generate_digest(MAC_LEARN_RECEIVER, mac_learn_digest);
}

meter storm_control_meter {
    type : bytes;
    result : hop_metadata.storm_control_color;
    instance_count : 64;
}

action set_bcast_storm_meter(meter_idx) {
    execute_meter(storm_control_meter, meter_idx,
                  hop_metadata.storm_control_color);
}

action set_ig_props(vrf_index, urpf, bd_acl_label, lif_acl_label) {
    modify_field(hop_metadata.vrf_index, vrf_index);
    modify_field(hop_metadata.urpf, urpf);
    modify_field(hop_metadata.bd_acl_label, bd_acl_label);
    modify_field(hop_metadata.lif_acl_label, lif_acl_label);
}

action on_ipv4_ucast_hit() {
}

action on_ipv4_xcast_hit() {
}

action on_ipv6_ucast_hit() {
}

action on_ipv6_xcast_hit() {
}

action set_next_hop_ipv4(next_hop_index, ecmp_index) {
    modify_field(hop_metadata.ipv4_next_hop_index, next_hop_index);
    modify_field(hop_metadata.ipv4_ecmp_index, ecmp_index);
    modify_field_with_hash_based_offset(hop_metadata.l3_hash, 0, l3_hash_ipv4, 0);
}

action set_next_hop_ipv6(next_hop_index, ecmp_index) {
    modify_field(hop_metadata.ipv6_next_hop_index, next_hop_index);
    modify_field(hop_metadata.ipv6_ecmp_index, ecmp_index);
    modify_field_with_hash_based_offset(hop_metadata.l3_hash, 0, l3_hash_ipv6, 0);
}

action set_multicast_replication_list(mc_index) {
    modify_field(hop_metadata.mcast_grp, mc_index);
}

action set_urpf_fail() {
    modify_field(hop_metadata.urpf_check_fail, 1);
}

action set_ecmp_next_hop_ipv4(dst_index) {
    modify_field(hop_metadata.ipv4_next_hop_index, dst_index);
}

action set_ecmp_next_hop_ipv6(dst_index) {
    modify_field(hop_metadata.ipv6_next_hop_index, dst_index);
}

action set_ethernet_addr(bd_index, smac, dmac) {
    modify_field(hop_metadata.bd_index, bd_index);
    modify_field(ethernet.srcAddr, smac);
    modify_field(ethernet.dstAddr, dmac);
}

action set_eg_lif(eg_lif) {
    modify_field(hop_metadata.eg_lif, eg_lif);
    modify_field_with_hash_based_offset(hop_metadata.l2_hash, 0, l2_hash_calc, 0);
}

action set_egress_port(e_port) {
    modify_field(standard_metadata.egress_spec, e_port);
}

action set_egress_props(bd_acl_label, lif_acl_label) {
    modify_field(hop_metadata.bd_acl_label, bd_acl_label);
    modify_field(hop_metadata.lif_acl_label, lif_acl_label);
}

action set_vlan(vlan_id) {
    modify_field(vlan_tag.vid, vlan_id);
}
# 25 "l2l3complex.p4" 2
# 1 "tables.p4" 1
/*
Copyright (c) 2015-2016 by The Board of Trustees of the Leland
Stanford Junior University.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


 Author: Lisa Yan (yanlisa@stanford.edu)
*/

/*
 * Table 1: IG_Phy_Meta
 */
table ig_phy_meta {
    reads {
        vlan_tag : valid;
        vlan_tag.vid : exact;
        standard_metadata.ingress_port : exact;
    }
    actions {
        set_bd_index_and_ig_lif;
    }
    size : 4000;
}

/*
 * Table 2: IG_Smac
 * Source mac learning.
 */
table ig_smac {
    /* 
     * reads {
     *     hop_metadata.bd_index : exact;
     *     ethernet.srcAddr : exact;
     *     hop_metadata.ig_lif : exact;
     * }
     */
    actions {
        generate_learn_notify;
    }
    size : 128000;
}

/*
 * Table 3: IG_Props
 * Sets vrf_index and urpf.
 */
table ig_props {
    reads {
        hop_metadata.bd_index : exact;
        hop_metadata.ig_lif : exact;
    }
    actions {
        set_ig_props;
    }
    size : 4000;
}

/*
 * Table 4: IG_Bcast_Storm
 */
table ig_bcast_storm {
    reads {
        standard_metadata.ingress_port : exact;
        ethernet.dstAddr : exact;
    }
    actions {
        nop;
        set_bcast_storm_meter;
    }
    size : 64;
}

/*
 * Table 5: IG_ACL1
 */
table ig_acl1 {
    reads {
        standard_metadata.ingress_port : exact;
        ethernet.srcAddr : exact;
        ethernet.dstAddr : exact;
        hop_metadata.bd_acl_label : ternary;
        hop_metadata.lif_acl_label : ternary;
    }
    actions {
        action_drop;
    }
    size : 8000;
}

/*
 * Table 6: IG_Router_Mac
 * Decides NTA as IPv4 unicast, IPv4 multicast, IPv6 unicast, IPv6 multicast, or pure L2 packet.
 */
table ig_router_mac {
    reads {
        hop_metadata.bd_index : exact;
        ethernet.dstAddr : exact;
        ethernet.etherType : exact;
    }
    actions {
        on_ipv4_ucast_hit;
        on_ipv4_xcast_hit;
        on_ipv6_ucast_hit;
        on_ipv6_xcast_hit;
        on_miss;
    }
    size : 1000;
}

/*
 * Table 7: Ipv4_Ucast_Host
 */
table ipv4_ucast_host {
    reads {
        hop_metadata.vrf_index : exact;
        ipv4.dstAddr : exact;
    }
    actions {
        set_next_hop_ipv4;
        on_miss;
    }
    size : 128000;
}

/*
 * Table 8: Ipv4_Ucast_LPM
 */
table ipv4_ucast_lpm {
    reads {
        hop_metadata.vrf_index : exact;
        ipv4.dstAddr : lpm;
    }
    actions {
        set_next_hop_ipv4;
        on_miss;
    }
    size : 16000;
}

/*
 * Table 9: Ipv4_Mcast
 */
table ipv4_mcast {
    reads {
        hop_metadata.vrf_index : exact;
        hop_metadata.bd_index : exact;
        ipv4.srcAddr : lpm;
        ipv4.dstAddr : exact;
    }
    actions {
        set_multicast_replication_list;
    }
    size : 32000;
}

/*
 * Table 10: Ipv4_Urpf
 */
table ipv4_urpf {
    reads {
        hop_metadata.bd_index : exact;
        ipv4.srcAddr : exact;
        hop_metadata.urpf : exact;
    }
    actions {
        set_urpf_fail;
        nop;
    }
    size : 16000;
}

/*
 * Table 11: Ipv6_Ucast_Host
 */
table ipv6_ucast_host {
    reads {
        hop_metadata.vrf_index : exact;
        ipv6.dstAddr : exact;
    }
    actions {
        set_next_hop_ipv6;
        on_miss;
    }
    size : 128000;
}

/*
 * Table 12: Ipv6_Ucast_LPM
 */
table ipv6_ucast_lpm {
    reads {
        hop_metadata.vrf_index : exact;
        ipv6.dstAddr : lpm;
    }
    actions {
        set_next_hop_ipv6;
        on_miss;
    }
    size : 16000;
}

/*
 * Table 13: Ipv6_Mcast
 */
table ipv6_mcast {
    reads {
        hop_metadata.vrf_index : exact;
        hop_metadata.bd_index : exact;
        ipv6.srcAddr : lpm;
        ipv6.dstAddr : exact;
    }
    actions {
        set_multicast_replication_list;
    }
    size : 32000;
}

/*
 * Table 14: Ipv6_Urpf
 */
table ipv6_urpf {
    reads {
        hop_metadata.bd_index : exact;
        ipv6.srcAddr : exact;
        hop_metadata.urpf : exact;
    }
    actions {
        set_urpf_fail;
        nop;
    }
    size : 16000;
}

/*
 * Table 15: Ipv4_Ecmp
 */
table ipv4_ecmp {
    reads {
        hop_metadata.ipv6_ecmp_index : exact;
        hop_metadata.l3_hash : exact;
    }
    actions {
        set_ecmp_next_hop_ipv4;
        on_miss;
    }
    size : 256;
}

/*
 * Table 16: Ipv4_Nexthop
 */
table ipv4_nexthop {
    reads {
        hop_metadata.ipv4_next_hop_index : exact;
    }
    actions {
        set_ethernet_addr;
    }
    size : 128000;
}

/*
 * Table 17: Ipv6_Ecmp
 */
table ipv6_ecmp {
    reads {
        hop_metadata.ipv4_ecmp_index : exact;
        hop_metadata.l3_hash : exact;
    }
    actions {
        set_ecmp_next_hop_ipv6;
        on_miss;
    }
    size : 245;
}

/*
 * Table 18: Ipv6_Nexthop
 */
table ipv6_nexthop {
    reads {
        hop_metadata.ipv6_next_hop_index : exact;
    }
    actions {
        set_ethernet_addr;
    }
    size : 128000;
}

/*
 * Table 19: IG_Dmac
 */
table ig_dmac {
    reads {
        hop_metadata.bd_index : exact;
        ethernet.dstAddr : exact;
    }
    actions {
        set_eg_lif;
    }
    size : 128000;
}

/*
 * Table 20: IG_Agg_Intf
 */
table ig_agg_intf {
    reads {
        hop_metadata.eg_lif : exact;
        hop_metadata.l2_hash : exact;
    }
    actions {
        set_egress_port;
    }
    size : 64;
}

/*
 * Table 21: IG_ACL2
 */
table ig_acl2 {
    reads {
        hop_metadata.ipv4_next_hop_index : ternary;
        hop_metadata.ipv6_next_hop_index : ternary;
    }
    actions {
        action_drop;
        nop;
    }
    size : 8000;
}

/*
 * Table 22: EG_Props
 */
table eg_props {
    reads {
        hop_metadata.bd_index : exact;
        hop_metadata.eg_lif : exact;
    }
    actions {
        set_egress_props;
    }
    size : 64;
}

/*
 * Table 23: EG_Phy_Meta
 */
table eg_phy_meta {
    reads {
        standard_metadata.egress_spec : exact;
        hop_metadata.bd_index : exact;
    }
    actions {
        set_vlan;
        action_drop;
    }
    size : 4000;
}

/*
 * Table 24: EG_ACL1
 */
table eg_acl1 {
    reads {
        hop_metadata.bd_index : ternary;
        hop_metadata.bd_acl_label : ternary;
        hop_metadata.lif_acl_label : ternary;
    }
    actions {
        action_drop;
    }
    size : 16000;
}
# 26 "l2l3complex.p4" 2

control l3_checks_ipv4 {
    apply(ipv4_urpf);
    apply(ipv4_ecmp);
    apply(ipv4_nexthop);
}

control l3_checks_ipv6 {
    apply(ipv6_urpf);
    apply(ipv6_ecmp);
    apply(ipv6_nexthop);
}

control ipv4_ucast {
    apply(ipv4_ucast_host);
    apply(ipv4_ucast_lpm);
}

control ipv6_ucast {
    apply(ipv6_ucast_host);
    apply(ipv6_ucast_lpm);
}

control ingress {
    /* Ingress properties, learning */
    apply(ig_bcast_storm);
    apply(ig_phy_meta);
    apply(ig_props);
    apply(ig_smac);

    /* ACL */
    apply(ig_acl1);

    /* Routing */
    apply(ig_router_mac) {
        on_ipv4_ucast_hit {
            ipv4_ucast();
        }
        on_ipv4_xcast_hit {
            apply(ipv4_mcast);
        }
        on_ipv6_ucast_hit {
            ipv6_ucast();
        }
        on_ipv6_xcast_hit {
            apply(ipv6_mcast);
        }
    }
    /* L3 Checks */
    if (valid(ipv4)) {
        l3_checks_ipv4();
    } else {
        if (valid(ipv6)) {
            l3_checks_ipv6();
        }
    }

    /* Switching */
    apply(ig_dmac);
    apply(ig_agg_intf);

    /* ACL */
    apply(ig_acl2);

    /* Egress properties */
    apply(eg_phy_meta);
    apply(eg_props);

    /* ACL */
    apply(eg_acl1);
}

control egress {
}
